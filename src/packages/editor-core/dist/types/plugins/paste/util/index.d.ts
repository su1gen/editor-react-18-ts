import { Slice, Mark, Node as PMNode, NodeType, Schema } from 'prosemirror-model';
import { EditorState, Selection, Transaction } from 'prosemirror-state';
import { PasteSource } from '../../analytics';
export declare function isPastedFromWord(html?: string): boolean;
export declare function isPastedFromExcel(html?: string): boolean;
export declare function isPastedFromDropboxPaper(html?: string): boolean;
export declare function isPastedFromGoogleDocs(html?: string): boolean;
export declare function isPastedFromGoogleSpreadSheets(html?: string): boolean;
export declare function isPastedFromPages(html?: string): boolean;
export declare function isPastedFromFabricEditor(html?: string): boolean;
export declare const isSingleLine: (text: string) => boolean;
export declare function htmlContainsSingleFile(html: string): boolean;
export declare function getPasteSource(event: ClipboardEvent): PasteSource;
export declare function isCode(str: string): boolean;
export declare function escapeLinks(text: string): string;
export declare function hasOnlyNodesOfType(...nodeTypes: NodeType[]): (slice: Slice) => boolean;
export declare function applyTextMarksToSlice(schema: Schema, marks?: Mark<any>[]): (slice: Slice) => Slice;
export declare function isEmptyNode(node: PMNode | null | undefined): boolean | null | undefined;
export declare function isCursorSelectionAtTextStartOrEnd(selection: Selection): boolean | null | undefined;
export declare function isPanelNode(node: PMNode | null | undefined): boolean;
export declare function isSelectionInsidePanel(selection: Selection): PMNode | null;
export declare const htmlHasInvalidLinkTags: (html?: string | undefined) => boolean;
export declare const removeDuplicateInvalidLinks: (html: string) => string;
export declare const addReplaceSelectedTableAnalytics: (state: EditorState, tr: Transaction) => Transaction;
